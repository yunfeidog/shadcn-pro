{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "modal",
  "type": "registry:ui",
  "title": "modal",
  "description": "A component for modal.",
  "dependencies": [
    "lucide-react"
  ],
  "files": [
    {
      "path": "registry/shadcn-pro/components/modal.tsx",
      "content": "\"use client\"\n\nimport * as React from \"react\"\nimport { createRoot } from \"react-dom/client\"\n\nimport { Button } from \"@/components/ui/button\"\nimport {\n  Dialog,\n  DialogContent,\n  DialogDescription,\n  DialogFooter,\n  DialogHeader,\n  DialogTitle,\n} from \"@/components/ui/dialog\"\n\nexport interface BaseModalProps {\n  title?: string\n  content: React.ReactNode\n  description?: string\n  okText?: string\n  cancelText?: string\n  onOk?: () => void\n  onCancel?: () => void\n  onClose?: () => void\n}\n\nexport interface ModalFuncProps extends BaseModalProps {\n  icon?: React.ReactNode\n}\n\ninterface ModalConfig extends ModalFuncProps {\n  type?: \"info\" | \"success\" | \"error\" | \"warning\" | \"confirm\"\n}\n\nconst ModalContent: React.FC<{\n  config: ModalConfig\n  onClose: () => void\n}> = ({ config, onClose }) => {\n  const {\n    title,\n    description,\n    content,\n    okText = \"确认\",\n    cancelText = \"取消\",\n    onOk,\n    onCancel,\n    type = \"info\",\n  } = config\n\n  const handleOk = () => {\n    onOk?.()\n    onClose()\n  }\n\n  const handleCancel = () => {\n    onCancel?.()\n    onClose()\n  }\n\n  const getIcon = () => {\n    switch (type) {\n      case \"success\":\n        return (\n          <div className=\"flex size-6 items-center justify-center rounded-full bg-green-100\">\n            <svg\n              className=\"size-4 text-green-600\"\n              fill=\"none\"\n              stroke=\"currentColor\"\n              viewBox=\"0 0 24 24\"\n            >\n              <path\n                strokeLinecap=\"round\"\n                strokeLinejoin=\"round\"\n                strokeWidth=\"2\"\n                d=\"M5 13l4 4L19 7\"\n              ></path>\n            </svg>\n          </div>\n        )\n      case \"error\":\n        return (\n          <div className=\"flex size-6 items-center justify-center rounded-full bg-red-100\">\n            <svg\n              className=\"size-4 text-red-600\"\n              fill=\"none\"\n              stroke=\"currentColor\"\n              viewBox=\"0 0 24 24\"\n            >\n              <path\n                strokeLinecap=\"round\"\n                strokeLinejoin=\"round\"\n                strokeWidth=\"2\"\n                d=\"M6 18L18 6M6 6l12 12\"\n              ></path>\n            </svg>\n          </div>\n        )\n      case \"warning\":\n        return (\n          <div className=\"flex size-6 items-center justify-center rounded-full bg-yellow-100\">\n            <svg\n              className=\"size-4 text-yellow-600\"\n              fill=\"none\"\n              stroke=\"currentColor\"\n              viewBox=\"0 0 24 24\"\n            >\n              <path\n                strokeLinecap=\"round\"\n                strokeLinejoin=\"round\"\n                strokeWidth=\"2\"\n                d=\"M12 9v2m0 4h.01m-6.938 4h13.856c1.54 0 2.502-1.667 1.732-3L13.732 4c-.77-1.333-2.694-1.333-3.464 0L3.34 16c-.77 1.333.192 3 1.732 3z\"\n              ></path>\n            </svg>\n          </div>\n        )\n      default:\n        return null\n    }\n  }\n\n  return (\n    <Dialog open onOpenChange={() => handleCancel()}>\n      <DialogContent className=\"sm:max-w-[425px]\">\n        <DialogHeader>\n          <div className=\"flex items-start gap-3\">\n            {getIcon()}\n            <div className=\"flex-1\">\n              {title && <DialogTitle>{title}</DialogTitle>}\n              {description && (\n                <DialogDescription>{description}</DialogDescription>\n              )}\n            </div>\n          </div>\n        </DialogHeader>\n        <div className=\"py-4\">\n          <div className=\"text-sm text-gray-700 dark:text-gray-300\">\n            {content}\n          </div>\n        </div>\n        <DialogFooter>\n          {(type === \"confirm\" || type === \"warning\") && (\n            <Button variant=\"outline\" onClick={handleCancel}>\n              {cancelText}\n            </Button>\n          )}\n          <Button\n            variant={type === \"error\" ? \"destructive\" : \"default\"}\n            onClick={handleOk}\n          >\n            {okText}\n          </Button>\n        </DialogFooter>\n      </DialogContent>\n    </Dialog>\n  )\n}\n\nconst createModal = (config: ModalConfig) => {\n  const div = document.createElement(\"div\")\n  document.body.appendChild(div)\n  const root = createRoot(div)\n\n  const handleClose = () => {\n    config.onClose?.()\n    root.unmount()\n    div.remove()\n  }\n\n  root.render(<ModalContent config={config} onClose={handleClose} />)\n}\n\nexport const Modal = {\n  info: (config: ModalFuncProps) => createModal({ ...config, type: \"info\" }),\n  success: (config: ModalFuncProps) =>\n    createModal({ ...config, type: \"success\" }),\n  error: (config: ModalFuncProps) => createModal({ ...config, type: \"error\" }),\n  warning: (config: ModalFuncProps) =>\n    createModal({ ...config, type: \"warning\" }),\n  confirm: (config: ModalFuncProps) =>\n    createModal({ ...config, type: \"confirm\" }),\n}\n\nexport type ModalType = keyof typeof Modal\n",
      "type": "registry:ui"
    }
  ]
}