{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "pro-table",
  "type": "registry:ui",
  "title": "pro-table",
  "description": "A component for pro-table.",
  "dependencies": [
    "lucide-react"
  ],
  "files": [
    {
      "path": "registry/shadcn-pro/components/pro-table.tsx",
      "content": "\"use client\"\n\nimport { forwardRef, useImperativeHandle, useMemo, useState } from \"react\"\nimport {\n  ColumnDef,\n  flexRender,\n  getCoreRowModel,\n  getPaginationRowModel,\n  useReactTable,\n} from \"@tanstack/react-table\"\nimport useSWR, { mutate } from \"swr\"\n\nimport {\n  Table,\n  TableBody,\n  TableCell,\n  TableHead,\n  TableHeader,\n  TableRow,\n} from \"@/components/ui/table\"\n\nimport CommonPagination from \"./common-pagination\"\n\nexport type DataTableRequest<TData> = (args: {\n  pageNumber: number\n  pageSize: number\n}) => Promise<{ total: number; records: TData[] }>\n\ninterface DataTableProps<TData, TValue> {\n  columns: ColumnDef<TData, TValue>[]\n  request: DataTableRequest<TData>\n  defaultPageSize?: number\n}\n\nexport interface DataTableRef {\n  refresh: () => void\n}\n\nexport const DataTable = forwardRef<DataTableRef, DataTableProps<any, any>>(\n  ({ columns, request, defaultPageSize = 10 }, ref) => {\n    const [PageNumber, setPageNumber] = useState(1)\n    const [pageSize, setPageSize] = useState(defaultPageSize)\n\n    const swrKey = useMemo(\n      () => [\"datatable\", request, PageNumber, pageSize],\n      [request, PageNumber, pageSize]\n    )\n    const { data, isLoading } = useSWR(\n      swrKey,\n      () => request({ pageNumber: PageNumber, pageSize }),\n      {\n        keepPreviousData: false,\n        revalidateOnFocus: false,\n        dedupingInterval: 0,\n      }\n    )\n\n    useImperativeHandle(ref, () => ({\n      refresh: () => {\n        mutate(swrKey)\n      },\n    }))\n\n    const records = data?.records ?? []\n    const total = data?.total ?? 0\n    const pageCount = Math.max(Math.ceil(total / pageSize), 1)\n\n    const table = useReactTable({\n      data: records,\n      columns,\n      getCoreRowModel: getCoreRowModel(),\n      getPaginationRowModel: getPaginationRowModel(),\n      state: { pagination: { pageIndex: PageNumber - 1, pageSize } },\n      onPaginationChange: (updater) => {\n        const current = { pageIndex: PageNumber - 1, pageSize }\n        const next = typeof updater === \"function\" ? updater(current) : updater\n        if (next.pageIndex !== current.pageIndex)\n          setPageNumber(next.pageIndex + 1)\n        if (next.pageSize !== current.pageSize) {\n          setPageSize(next.pageSize)\n          setPageNumber(1)\n        }\n      },\n      pageCount,\n      manualPagination: true,\n    })\n\n    return (\n      <div className=\"overflow-hidden rounded-md border\">\n        <Table>\n          <TableHeader>\n            {table.getHeaderGroups().map((headerGroup) => (\n              <TableRow key={headerGroup.id}>\n                {headerGroup.headers.map((header) => {\n                  return (\n                    <TableHead key={header.id}>\n                      {header.isPlaceholder\n                        ? null\n                        : flexRender(\n                            header.column.columnDef.header,\n                            header.getContext()\n                          )}\n                    </TableHead>\n                  )\n                })}\n              </TableRow>\n            ))}\n          </TableHeader>\n          <TableBody>\n            {isLoading ? (\n              <TableRow>\n                <TableCell\n                  colSpan={columns.length}\n                  className=\"h-24 text-center\"\n                >\n                  加载中...\n                </TableCell>\n              </TableRow>\n            ) : records.length === 0 ? (\n              <TableRow>\n                <TableCell\n                  colSpan={columns.length}\n                  className=\"h-24 text-center\"\n                >\n                  暂无数据\n                </TableCell>\n              </TableRow>\n            ) : (\n              table.getRowModel().rows.map((row) => (\n                <TableRow\n                  key={row.id}\n                  data-state={row.getIsSelected() && \"selected\"}\n                >\n                  {row.getVisibleCells().map((cell) => (\n                    <TableCell key={cell.id}>\n                      {flexRender(\n                        cell.column.columnDef.cell,\n                        cell.getContext()\n                      )}\n                    </TableCell>\n                  ))}\n                </TableRow>\n              ))\n            )}\n          </TableBody>\n        </Table>\n        <CommonPagination\n          currentPage={PageNumber}\n          total={total}\n          pageSize={pageSize}\n          onPageChange={setPageNumber}\n          onPageSizeChange={setPageSize}\n          showPageSizeSelector={true}\n        />\n      </div>\n    )\n  }\n)\n\nDataTable.displayName = \"DataTable\"\n",
      "type": "registry:ui"
    }
  ]
}