{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "pro-table-demo",
  "type": "registry:example",
  "title": "ProTable Demo",
  "description": "Example showing a pro table.",
  "dependencies": [
    "@tanstack/react-table"
  ],
  "registryDependencies": [
    "@shadcn-pro/components/pro-table"
  ],
  "files": [
    {
      "path": "registry/example/pro-table-demo.tsx",
      "content": "\"use client\"\n\nimport { ColumnDef } from \"@tanstack/react-table\"\n\nimport { Badge } from \"@/components/ui/badge\"\nimport { Button } from \"@/components/ui/button\"\nimport { DataTable } from \"@/registry/shadcn-pro/components/pro-table\"\n\ninterface DemoUser {\n  id: number\n  name: string\n  email: string\n  role: string\n  status: \"active\" | \"inactive\"\n}\n\nconst generateMockUsers = (count: number, offset: number = 0): DemoUser[] => {\n  return Array.from({ length: count }, (_, i) => ({\n    id: offset + i + 1,\n    name: `User ${offset + i + 1}`,\n    email: `user${offset + i + 1}@example.com`,\n    role: [\"Admin\", \"Editor\", \"Viewer\"][Math.floor(Math.random() * 3)],\n    status: Math.random() > 0.3 ? \"active\" : (\"inactive\" as const),\n  }))\n}\n\nconst columns: ColumnDef<DemoUser>[] = [\n  {\n    accessorKey: \"id\",\n    header: \"ID\",\n    cell: ({ row }) => (\n      <div className=\"w-[60px] font-mono text-sm\">{row.getValue(\"id\")}</div>\n    ),\n  },\n  {\n    accessorKey: \"name\",\n    header: \"Name\",\n    cell: ({ row }) => (\n      <div className=\"font-medium\">{row.getValue(\"name\")}</div>\n    ),\n  },\n  {\n    accessorKey: \"email\",\n    header: \"Email\",\n    cell: ({ row }) => (\n      <div className=\"text-muted-foreground text-sm\">\n        {row.getValue(\"email\")}\n      </div>\n    ),\n  },\n  {\n    accessorKey: \"role\",\n    header: \"Role\",\n    cell: ({ row }) => {\n      const role = row.getValue(\"role\") as string\n      return (\n        <Badge variant={role === \"Admin\" ? \"default\" : \"secondary\"}>\n          {role}\n        </Badge>\n      )\n    },\n  },\n  {\n    accessorKey: \"status\",\n    header: \"Status\",\n    cell: ({ row }) => {\n      const status = row.getValue(\"status\") as string\n      return (\n        <Badge variant={status === \"active\" ? \"default\" : \"destructive\"}>\n          {status}\n        </Badge>\n      )\n    },\n  },\n]\n\n// Mock async data fetcher\nconst fetchUsers = async (params: {\n  page: number\n  size: number\n  search?: string\n}): Promise<{ data: DemoUser[]; total: number }> => {\n  // Simulate API delay\n  await new Promise((resolve) => setTimeout(resolve, 500))\n\n  const allUsers = generateMockUsers(100)\n  let filteredUsers = allUsers\n\n  // Simple search filter\n  if (params.search) {\n    filteredUsers = allUsers.filter(\n      (user) =>\n        user.name.toLowerCase().includes(params.search!.toLowerCase()) ||\n        user.email.toLowerCase().includes(params.search!.toLowerCase())\n    )\n  }\n\n  const startIndex = (params.page - 1) * params.size\n  const endIndex = startIndex + params.size\n  const paginatedUsers = filteredUsers.slice(startIndex, endIndex)\n  console.log(\"paginatedUsers\", paginatedUsers)\n\n  return {\n    data: paginatedUsers,\n    total: filteredUsers.length,\n  }\n}\n\nexport default function ProTableDemo() {\n  const actionColumns: ColumnDef<DemoUser>[] = [\n    ...columns.slice(0, 3), // id, name, email\n    {\n      id: \"actions\",\n      header: \"Actions\",\n      cell: ({ row }) => (\n        <div className=\"flex gap-1\">\n          <Button variant=\"outline\" size=\"sm\">\n            Edit\n          </Button>\n          <Button variant=\"destructive\" size=\"sm\">\n            Delete\n          </Button>\n        </div>\n      ),\n    },\n  ]\n\n  return (\n    <div className=\"w-full max-w-3xl\">\n      <DataTable\n        columns={actionColumns}\n        request={fetchUsers}\n        defaultPageSize={3}\n        className=\"rounded-lg border\"\n      />\n    </div>\n  )\n}\n",
      "type": "registry:example"
    }
  ]
}