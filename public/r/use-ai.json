{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "use-ai",
  "type": "registry:hook",
  "title": "Use AI Hook",
  "description": "A React hook for streaming AI responses using Server-Sent Events (SSE)",
  "dependencies": [
    "@microsoft/fetch-event-source"
  ],
  "files": [
    {
      "path": "registry/yunfei/hooks/use-ai.ts",
      "content": "'use client'\r\n\r\nimport { useEffect, useState, useRef } from 'react'\r\nimport { fetchEventSource } from '@microsoft/fetch-event-source'\r\n\r\ninterface UseAIOptions {\r\n  url?: string\r\n  headers?: Record<string, string>\r\n  onMessage?: (data: string) => void\r\n  onError?: (error: Error) => void\r\n  autoStart?: boolean\r\n}\r\n\r\nexport function useAI({\r\n  url = '/api/ai/stream',\r\n  headers = {},\r\n  onMessage,\r\n  onError,\r\n  autoStart = false\r\n}: UseAIOptions = {}) {\r\n  const [text, setText] = useState('')\r\n  const [isLoading, setIsLoading] = useState(false)\r\n  const [error, setError] = useState<Error | null>(null)\r\n  const controllerRef = useRef<AbortController | null>(null)\r\n\r\n  const start = (customUrl?: string) => {\r\n    if (isLoading) return\r\n\r\n    const streamUrl = customUrl || url\r\n    if (!streamUrl) return\r\n\r\n    setIsLoading(true)\r\n    setError(null)\r\n    setText('')\r\n\r\n    const ctrl = new AbortController()\r\n    controllerRef.current = ctrl\r\n\r\n    fetchEventSource(streamUrl, {\r\n      method: 'GET',\r\n      headers: {\r\n        'Content-Type': 'text/event-stream',\r\n        'Cache-Control': 'no-cache',\r\n        ...headers,\r\n      },\r\n      signal: ctrl.signal,\r\n      onmessage(event) {\r\n        setText((prev) => prev + event.data)\r\n        if (onMessage) onMessage(event.data)\r\n      },\r\n      onerror(err) {\r\n        const error = err instanceof Error ? err : new Error('Stream error')\r\n        setError(error)\r\n        setIsLoading(false)\r\n        if (onError) onError(error)\r\n      },\r\n      onclose() {\r\n        setIsLoading(false)\r\n      }\r\n    })\r\n  }\r\n\r\n  const stop = () => {\r\n    controllerRef.current?.abort()\r\n    setIsLoading(false)\r\n  }\r\n\r\n  const reset = () => {\r\n    stop()\r\n    setText('')\r\n    setError(null)\r\n  }\r\n\r\n  useEffect(() => {\r\n    if (autoStart && url) {\r\n      start()\r\n    }\r\n\r\n    return () => {\r\n      controllerRef.current?.abort()\r\n    }\r\n  }, [url, autoStart])\r\n\r\n  return {\r\n    text,\r\n    isLoading,\r\n    error,\r\n    start,\r\n    stop,\r\n    reset\r\n  }\r\n}",
      "type": "registry:hook"
    }
  ]
}