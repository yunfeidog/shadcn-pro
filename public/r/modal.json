{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "modal",
  "type": "registry:component",
  "title": "Command Modal",
  "description": "A command modal component with static methods similar to Ant Design Modal",
  "dependencies": [
    "@radix-ui/react-dialog"
  ],
  "files": [
    {
      "path": "registry/yunfei/blocks/modal.tsx",
      "content": "import { createRoot } from 'react-dom/client'\r\nimport * as React from 'react'\r\nimport {\r\n  Dialog,\r\n  DialogContent,\r\n  DialogHeader,\r\n  DialogTitle,\r\n  DialogFooter,\r\n  DialogDescription\r\n} from '@/components/ui/dialog'\r\nimport { Button } from '@/components/ui/button'\r\n\r\nexport interface BaseModalProps {\r\n  title?: string\r\n  content: React.ReactNode\r\n  description?: string\r\n  okText?: string\r\n  cancelText?: string\r\n  onOk?: () => void\r\n  onCancel?: () => void\r\n  onClose?: () => void\r\n}\r\n\r\nexport interface ModalFuncProps extends BaseModalProps {\r\n  icon?: React.ReactNode\r\n}\r\n\r\ninterface ModalConfig extends ModalFuncProps {\r\n  type?: 'info' | 'success' | 'error' | 'warning' | 'confirm'\r\n}\r\n\r\nconst ModalContent: React.FC<{\r\n  config: ModalConfig\r\n  onClose: () => void\r\n}> = ({ config, onClose }) => {\r\n  const {\r\n    title,\r\n    description,\r\n    content,\r\n    okText = '确认',\r\n    cancelText = '取消',\r\n    onOk,\r\n    onCancel,\r\n    type = 'info'\r\n  } = config\r\n\r\n  const handleOk = () => {\r\n    onOk?.()\r\n    onClose()\r\n  }\r\n\r\n  const handleCancel = () => {\r\n    onCancel?.()\r\n    onClose()\r\n  }\r\n\r\n  const getIcon = () => {\r\n    switch (type) {\r\n      case 'success':\r\n        return (\r\n          <div className=\"size-6 rounded-full bg-green-100 flex items-center justify-center\">\r\n            <svg className=\"size-4 text-green-600\" fill=\"none\" stroke=\"currentColor\" viewBox=\"0 0 24 24\">\r\n              <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth=\"2\" d=\"M5 13l4 4L19 7\"></path>\r\n            </svg>\r\n          </div>\r\n        )\r\n      case 'error':\r\n        return (\r\n          <div className=\"size-6 rounded-full bg-red-100 flex items-center justify-center\">\r\n            <svg className=\"size-4 text-red-600\" fill=\"none\" stroke=\"currentColor\" viewBox=\"0 0 24 24\">\r\n              <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth=\"2\" d=\"M6 18L18 6M6 6l12 12\"></path>\r\n            </svg>\r\n          </div>\r\n        )\r\n      case 'warning':\r\n        return (\r\n          <div className=\"size-6 rounded-full bg-yellow-100 flex items-center justify-center\">\r\n            <svg className=\"size-4 text-yellow-600\" fill=\"none\" stroke=\"currentColor\" viewBox=\"0 0 24 24\">\r\n              <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth=\"2\" d=\"M12 9v2m0 4h.01m-6.938 4h13.856c1.54 0 2.502-1.667 1.732-3L13.732 4c-.77-1.333-2.694-1.333-3.464 0L3.34 16c-.77 1.333.192 3 1.732 3z\"></path>\r\n            </svg>\r\n          </div>\r\n        )\r\n      default:\r\n        return null\r\n    }\r\n  }\r\n\r\n  return (\r\n    <Dialog open onOpenChange={() => handleCancel()}>\r\n      <DialogContent className=\"sm:max-w-[425px]\">\r\n        <DialogHeader>\r\n          <div className=\"flex items-start gap-3\">\r\n            {getIcon()}\r\n            <div className=\"flex-1\">\r\n              {title && <DialogTitle>{title}</DialogTitle>}\r\n              {description && <DialogDescription>{description}</DialogDescription>}\r\n            </div>\r\n          </div>\r\n        </DialogHeader>\r\n        <div className=\"py-4\">\r\n          <div className=\"text-sm text-gray-700 dark:text-gray-300\">\r\n            {content}\r\n          </div>\r\n        </div>\r\n        <DialogFooter>\r\n          {(type === 'confirm' || type === 'warning') && (\r\n            <Button variant=\"outline\" onClick={handleCancel}>\r\n              {cancelText}\r\n            </Button>\r\n          )}\r\n          <Button\r\n            variant={type === 'error' ? 'destructive' : 'default'}\r\n            onClick={handleOk}\r\n          >\r\n            {okText}\r\n          </Button>\r\n        </DialogFooter>\r\n      </DialogContent>\r\n    </Dialog>\r\n  )\r\n}\r\n\r\nconst createModal = (config: ModalConfig) => {\r\n  const div = document.createElement('div')\r\n  document.body.appendChild(div)\r\n  const root = createRoot(div)\r\n\r\n  const handleClose = () => {\r\n    config.onClose?.()\r\n    root.unmount()\r\n    div.remove()\r\n  }\r\n\r\n  root.render(<ModalContent config={config} onClose={handleClose} />)\r\n}\r\n\r\nexport const Modal = {\r\n  info: (config: ModalFuncProps) => createModal({ ...config, type: 'info' }),\r\n  success: (config: ModalFuncProps) => createModal({ ...config, type: 'success' }),\r\n  error: (config: ModalFuncProps) => createModal({ ...config, type: 'error' }),\r\n  warning: (config: ModalFuncProps) => createModal({ ...config, type: 'warning' }),\r\n  confirm: (config: ModalFuncProps) => createModal({ ...config, type: 'confirm' })\r\n}\r\n\r\nexport type ModalType = keyof typeof Modal",
      "type": "registry:component"
    },
    {
      "path": "components/ui/dialog.tsx",
      "content": "\"use client\"\n\nimport * as React from \"react\"\nimport * as DialogPrimitive from \"@radix-ui/react-dialog\"\nimport { XIcon } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nfunction Dialog({\n  ...props\n}: React.ComponentProps<typeof DialogPrimitive.Root>) {\n  return <DialogPrimitive.Root data-slot=\"dialog\" {...props} />\n}\n\nfunction DialogTrigger({\n  ...props\n}: React.ComponentProps<typeof DialogPrimitive.Trigger>) {\n  return <DialogPrimitive.Trigger data-slot=\"dialog-trigger\" {...props} />\n}\n\nfunction DialogPortal({\n  ...props\n}: React.ComponentProps<typeof DialogPrimitive.Portal>) {\n  return <DialogPrimitive.Portal data-slot=\"dialog-portal\" {...props} />\n}\n\nfunction DialogClose({\n  ...props\n}: React.ComponentProps<typeof DialogPrimitive.Close>) {\n  return <DialogPrimitive.Close data-slot=\"dialog-close\" {...props} />\n}\n\nfunction DialogOverlay({\n  className,\n  ...props\n}: React.ComponentProps<typeof DialogPrimitive.Overlay>) {\n  return (\n    <DialogPrimitive.Overlay\n      data-slot=\"dialog-overlay\"\n      className={cn(\n        \"data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 fixed inset-0 z-50 bg-black/50\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\n\nfunction DialogContent({\n  className,\n  children,\n  showCloseButton = true,\n  ...props\n}: React.ComponentProps<typeof DialogPrimitive.Content> & {\n  showCloseButton?: boolean\n}) {\n  return (\n    <DialogPortal data-slot=\"dialog-portal\">\n      <DialogOverlay />\n      <DialogPrimitive.Content\n        data-slot=\"dialog-content\"\n        className={cn(\n          \"bg-background data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 fixed top-[50%] left-[50%] z-50 grid w-full max-w-[calc(100%-2rem)] translate-x-[-50%] translate-y-[-50%] gap-4 rounded-lg border p-6 shadow-lg duration-200 sm:max-w-lg\",\n          className\n        )}\n        {...props}\n      >\n        {children}\n        {showCloseButton && (\n          <DialogPrimitive.Close\n            data-slot=\"dialog-close\"\n            className=\"ring-offset-background focus:ring-ring data-[state=open]:bg-accent data-[state=open]:text-muted-foreground absolute top-4 right-4 rounded-xs opacity-70 transition-opacity hover:opacity-100 focus:ring-2 focus:ring-offset-2 focus:outline-hidden disabled:pointer-events-none [&_svg]:pointer-events-none [&_svg]:shrink-0 [&_svg:not([class*='size-'])]:size-4\"\n          >\n            <XIcon />\n            <span className=\"sr-only\">Close</span>\n          </DialogPrimitive.Close>\n        )}\n      </DialogPrimitive.Content>\n    </DialogPortal>\n  )\n}\n\nfunction DialogHeader({ className, ...props }: React.ComponentProps<\"div\">) {\n  return (\n    <div\n      data-slot=\"dialog-header\"\n      className={cn(\"flex flex-col gap-2 text-center sm:text-left\", className)}\n      {...props}\n    />\n  )\n}\n\nfunction DialogFooter({ className, ...props }: React.ComponentProps<\"div\">) {\n  return (\n    <div\n      data-slot=\"dialog-footer\"\n      className={cn(\n        \"flex flex-col-reverse gap-2 sm:flex-row sm:justify-end\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\n\nfunction DialogTitle({\n  className,\n  ...props\n}: React.ComponentProps<typeof DialogPrimitive.Title>) {\n  return (\n    <DialogPrimitive.Title\n      data-slot=\"dialog-title\"\n      className={cn(\"text-lg leading-none font-semibold\", className)}\n      {...props}\n    />\n  )\n}\n\nfunction DialogDescription({\n  className,\n  ...props\n}: React.ComponentProps<typeof DialogPrimitive.Description>) {\n  return (\n    <DialogPrimitive.Description\n      data-slot=\"dialog-description\"\n      className={cn(\"text-muted-foreground text-sm\", className)}\n      {...props}\n    />\n  )\n}\n\nexport {\n  Dialog,\n  DialogClose,\n  DialogContent,\n  DialogDescription,\n  DialogFooter,\n  DialogHeader,\n  DialogOverlay,\n  DialogPortal,\n  DialogTitle,\n  DialogTrigger,\n}\n",
      "type": "registry:component"
    },
    {
      "path": "components/ui/button.tsx",
      "content": "import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst buttonVariants = cva(\n  \"inline-flex items-center justify-center gap-2 whitespace-nowrap rounded-md text-sm font-medium transition-all disabled:pointer-events-none disabled:opacity-50 [&_svg]:pointer-events-none [&_svg:not([class*='size-'])]:size-4 shrink-0 [&_svg]:shrink-0 outline-none focus-visible:border-ring focus-visible:ring-ring/50 focus-visible:ring-[3px] aria-invalid:ring-destructive/20 dark:aria-invalid:ring-destructive/40 aria-invalid:border-destructive\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-primary text-primary-foreground hover:bg-primary/90\",\n        destructive:\n          \"bg-destructive text-white hover:bg-destructive/90 focus-visible:ring-destructive/20 dark:focus-visible:ring-destructive/40 dark:bg-destructive/60\",\n        outline:\n          \"border bg-background shadow-xs hover:bg-accent hover:text-accent-foreground dark:bg-input/30 dark:border-input dark:hover:bg-input/50\",\n        secondary:\n          \"bg-secondary text-secondary-foreground hover:bg-secondary/80\",\n        ghost:\n          \"hover:bg-accent hover:text-accent-foreground dark:hover:bg-accent/50\",\n        link: \"text-primary underline-offset-4 hover:underline\",\n      },\n      size: {\n        default: \"h-9 px-4 py-2 has-[>svg]:px-3\",\n        sm: \"h-8 rounded-md gap-1.5 px-3 has-[>svg]:px-2.5\",\n        lg: \"h-10 rounded-md px-6 has-[>svg]:px-4\",\n        icon: \"size-9\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nfunction Button({\n  className,\n  variant,\n  size,\n  asChild = false,\n  ...props\n}: React.ComponentProps<\"button\"> &\n  VariantProps<typeof buttonVariants> & {\n    asChild?: boolean\n  }) {\n  const Comp = asChild ? Slot : \"button\"\n\n  return (\n    <Comp\n      data-slot=\"button\"\n      className={cn(buttonVariants({ variant, size, className }))}\n      {...props}\n    />\n  )\n}\n\nexport { Button, buttonVariants }\n",
      "type": "registry:component"
    }
  ]
}