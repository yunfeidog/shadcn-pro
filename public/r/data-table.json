{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "data-table",
  "type": "registry:component",
  "title": "Data Table",
  "description": "A powerful data table with server-side pagination using TanStack Table and SWR",
  "dependencies": [
    "@tanstack/react-table",
    "swr",
    "lucide-react"
  ],
  "files": [
    {
      "path": "registry/yunfei/blocks/data-table.tsx",
      "content": "'use client'\r\n\r\nimport { ColumnDef, flexRender, getCoreRowModel, getPaginationRowModel, useReactTable } from '@tanstack/react-table'\r\nimport { forwardRef, useImperativeHandle, useMemo, useState } from 'react'\r\nimport useSWR, { mutate } from 'swr'\r\n\r\nimport CommonPagination from './common-pagination'\r\nimport { Table, TableBody, TableCell, TableHead, TableHeader, TableRow } from '@/components/ui/table'\r\n\r\nexport type DataTableRequest<TData> = (args: { pageNumber: number; pageSize: number }) => Promise<{ total: number; records: TData[] }>\r\n\r\ninterface DataTableProps<TData, TValue> {\r\n    columns: ColumnDef<TData, TValue>[]\r\n    request: DataTableRequest<TData>\r\n    defaultPageSize?: number\r\n}\r\n\r\nexport interface DataTableRef {\r\n    refresh: () => void\r\n}\r\n\r\nexport const DataTable = forwardRef<DataTableRef, DataTableProps<any, any>>(({ columns, request, defaultPageSize = 10 }, ref) => {\r\n    const [PageNumber, setPageNumber] = useState(1)\r\n    const [pageSize, setPageSize] = useState(defaultPageSize)\r\n\r\n    const swrKey = useMemo(() => ['datatable', request, PageNumber, pageSize], [request, PageNumber, pageSize])\r\n    const { data, isLoading } = useSWR(swrKey, () => request({ pageNumber: PageNumber, pageSize }), {\r\n        keepPreviousData: false,\r\n        revalidateOnFocus: false,\r\n        dedupingInterval: 0,\r\n    })\r\n\r\n    useImperativeHandle(ref, () => ({\r\n        refresh: () => {\r\n            mutate(swrKey)\r\n        },\r\n    }))\r\n\r\n    const records = data?.records ?? []\r\n    const total = data?.total ?? 0\r\n    const pageCount = Math.max(Math.ceil(total / pageSize), 1)\r\n\r\n    const table = useReactTable({\r\n        data: records,\r\n        columns,\r\n        getCoreRowModel: getCoreRowModel(),\r\n        getPaginationRowModel: getPaginationRowModel(),\r\n        state: { pagination: { pageIndex: PageNumber - 1, pageSize } },\r\n        onPaginationChange: (updater) => {\r\n            const current = { pageIndex: PageNumber - 1, pageSize }\r\n            const next = typeof updater === 'function' ? updater(current) : updater\r\n            if (next.pageIndex !== current.pageIndex) setPageNumber(next.pageIndex + 1)\r\n            if (next.pageSize !== current.pageSize) {\r\n                setPageSize(next.pageSize)\r\n                setPageNumber(1)\r\n            }\r\n        },\r\n        pageCount,\r\n        manualPagination: true,\r\n    })\r\n\r\n    return (\r\n        <div className=\"overflow-hidden rounded-md border\">\r\n            <Table>\r\n                <TableHeader>\r\n                    {table.getHeaderGroups().map((headerGroup) => (\r\n                        <TableRow key={headerGroup.id}>\r\n                            {headerGroup.headers.map((header) => {\r\n                                return <TableHead key={header.id}>{header.isPlaceholder ? null : flexRender(header.column.columnDef.header, header.getContext())}</TableHead>\r\n                            })}\r\n                        </TableRow>\r\n                    ))}\r\n                </TableHeader>\r\n                <TableBody>\r\n                    {isLoading ? (\r\n                        <TableRow>\r\n                            <TableCell colSpan={columns.length} className=\"h-24 text-center\">\r\n                                加载中...\r\n                            </TableCell>\r\n                        </TableRow>\r\n                    ) : records.length === 0 ? (\r\n                        <TableRow>\r\n                            <TableCell colSpan={columns.length} className=\"h-24 text-center\">\r\n                                暂无数据\r\n                            </TableCell>\r\n                        </TableRow>\r\n                    ) : (\r\n                        table.getRowModel().rows.map((row) => (\r\n                            <TableRow key={row.id} data-state={row.getIsSelected() && 'selected'}>\r\n                                {row.getVisibleCells().map((cell) => (\r\n                                    <TableCell key={cell.id}>{flexRender(cell.column.columnDef.cell, cell.getContext())}</TableCell>\r\n                                ))}\r\n                            </TableRow>\r\n                        ))\r\n                    )}\r\n                </TableBody>\r\n            </Table>\r\n            <CommonPagination currentPage={PageNumber} total={total} pageSize={pageSize} onPageChange={setPageNumber} onPageSizeChange={setPageSize} showPageSizeSelector={true} />\r\n        </div>\r\n    )\r\n})\r\n\r\nDataTable.displayName = 'DataTable'",
      "type": "registry:component"
    },
    {
      "path": "registry/yunfei/blocks/common-pagination.tsx",
      "content": "'use client'\r\n\r\nimport { Button } from '@/components/ui/button'\r\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from '@/components/ui/select'\r\nimport { ChevronLeft, ChevronRight, ChevronsLeft, ChevronsRight } from 'lucide-react'\r\n\r\ninterface CommonPaginationProps {\r\n    currentPage: number\r\n    total: number // 总记录数\r\n    pageSize: number // 每页记录数\r\n    onPageChange: (page: number) => void\r\n    onPageSizeChange?: (pageSize: number) => void\r\n    className?: string\r\n    pageSizeOptions?: number[] // 可选的页面大小选项\r\n    showPageSizeSelector?: boolean // 是否显示页面大小选择器\r\n}\r\n\r\nexport default function CommonPagination({\r\n                                             currentPage,\r\n                                             total,\r\n                                             pageSize,\r\n                                             onPageChange,\r\n                                             onPageSizeChange,\r\n                                             className = '',\r\n                                             pageSizeOptions = [5, 10, 20, 30, 40, 50],\r\n                                             showPageSizeSelector = false,\r\n                                         }: CommonPaginationProps) {\r\n    // 计算总页数\r\n    const totalPages = Math.max(Math.ceil(total / pageSize), 1)\r\n\r\n    // 如果没有数据，不显示分页\r\n    if (total <= 0) {\r\n        return null\r\n    }\r\n\r\n    return (\r\n        <div className={`flex items-center justify-between px-2 py-4 ${className}`}>\r\n            {/* 左侧：每页显示条数选择器 */}\r\n            {showPageSizeSelector && pageSize && onPageSizeChange ? (\r\n                <div className=\"flex items-center space-x-2\">\r\n                    <p className=\"text-sm font-medium\">每页显示</p>\r\n                    <Select value={pageSize.toString()} onValueChange={(value) => onPageSizeChange(Number(value))}>\r\n                        <SelectTrigger className=\"h-8 w-[70px]\">\r\n                            <SelectValue placeholder={pageSize} />\r\n                        </SelectTrigger>\r\n                        <SelectContent side=\"top\">\r\n                            {pageSizeOptions.map((size) => (\r\n                                <SelectItem key={size} value={size.toString()}>\r\n                                    {size}\r\n                                </SelectItem>\r\n                            ))}\r\n                        </SelectContent>\r\n                    </Select>\r\n                    <p className=\"text-sm font-medium\">条记录</p>\r\n                </div>\r\n            ) : (\r\n                <div></div>\r\n            )}\r\n\r\n            {/* 右侧：分页控制 */}\r\n            <div className=\"flex items-center space-x-6 lg:space-x-8\">\r\n                <div className=\"flex w-[100px] items-center justify-center text-sm font-medium whitespace-nowrap\">\r\n                    第 {currentPage} 页，共 {totalPages} 页\r\n                </div>\r\n                <div className=\"flex items-center space-x-2\">\r\n                    <Button variant=\"outline\" className=\"hidden h-8 w-8 p-0 lg:flex\" onClick={() => onPageChange(1)} disabled={currentPage === 1}>\r\n                        <span className=\"sr-only\">跳转到第一页</span>\r\n                        <ChevronsLeft className=\"h-4 w-4\" />\r\n                    </Button>\r\n                    <Button variant=\"outline\" className=\"h-8 w-8 p-0\" onClick={() => onPageChange(currentPage - 1)} disabled={currentPage === 1}>\r\n                        <span className=\"sr-only\">跳转到上一页</span>\r\n                        <ChevronLeft className=\"h-4 w-4\" />\r\n                    </Button>\r\n                    <Button variant=\"outline\" className=\"h-8 w-8 p-0\" onClick={() => onPageChange(currentPage + 1)} disabled={currentPage === totalPages}>\r\n                        <span className=\"sr-only\">跳转到下一页</span>\r\n                        <ChevronRight className=\"h-4 w-4\" />\r\n                    </Button>\r\n                    <Button variant=\"outline\" className=\"hidden h-8 w-8 p-0 lg:flex\" onClick={() => onPageChange(totalPages)} disabled={currentPage === totalPages}>\r\n                        <span className=\"sr-only\">跳转到最后一页</span>\r\n                        <ChevronsRight className=\"h-4 w-4\" />\r\n                    </Button>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    )\r\n}",
      "type": "registry:component"
    },
    {
      "path": "components/ui/table.tsx",
      "content": "\"use client\"\n\nimport * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nfunction Table({ className, ...props }: React.ComponentProps<\"table\">) {\n  return (\n    <div\n      data-slot=\"table-container\"\n      className=\"relative w-full overflow-x-auto\"\n    >\n      <table\n        data-slot=\"table\"\n        className={cn(\"w-full caption-bottom text-sm\", className)}\n        {...props}\n      />\n    </div>\n  )\n}\n\nfunction TableHeader({ className, ...props }: React.ComponentProps<\"thead\">) {\n  return (\n    <thead\n      data-slot=\"table-header\"\n      className={cn(\"[&_tr]:border-b\", className)}\n      {...props}\n    />\n  )\n}\n\nfunction TableBody({ className, ...props }: React.ComponentProps<\"tbody\">) {\n  return (\n    <tbody\n      data-slot=\"table-body\"\n      className={cn(\"[&_tr:last-child]:border-0\", className)}\n      {...props}\n    />\n  )\n}\n\nfunction TableFooter({ className, ...props }: React.ComponentProps<\"tfoot\">) {\n  return (\n    <tfoot\n      data-slot=\"table-footer\"\n      className={cn(\n        \"bg-muted/50 border-t font-medium [&>tr]:last:border-b-0\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\n\nfunction TableRow({ className, ...props }: React.ComponentProps<\"tr\">) {\n  return (\n    <tr\n      data-slot=\"table-row\"\n      className={cn(\n        \"hover:bg-muted/50 data-[state=selected]:bg-muted border-b transition-colors\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\n\nfunction TableHead({ className, ...props }: React.ComponentProps<\"th\">) {\n  return (\n    <th\n      data-slot=\"table-head\"\n      className={cn(\n        \"text-foreground h-10 px-2 text-left align-middle font-medium whitespace-nowrap [&:has([role=checkbox])]:pr-0 [&>[role=checkbox]]:translate-y-[2px]\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\n\nfunction TableCell({ className, ...props }: React.ComponentProps<\"td\">) {\n  return (\n    <td\n      data-slot=\"table-cell\"\n      className={cn(\n        \"p-2 align-middle whitespace-nowrap [&:has([role=checkbox])]:pr-0 [&>[role=checkbox]]:translate-y-[2px]\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\n\nfunction TableCaption({\n  className,\n  ...props\n}: React.ComponentProps<\"caption\">) {\n  return (\n    <caption\n      data-slot=\"table-caption\"\n      className={cn(\"text-muted-foreground mt-4 text-sm\", className)}\n      {...props}\n    />\n  )\n}\n\nexport {\n  Table,\n  TableHeader,\n  TableBody,\n  TableFooter,\n  TableHead,\n  TableRow,\n  TableCell,\n  TableCaption,\n}\n",
      "type": "registry:component"
    },
    {
      "path": "components/ui/button.tsx",
      "content": "import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst buttonVariants = cva(\n  \"inline-flex items-center justify-center gap-2 whitespace-nowrap rounded-md text-sm font-medium transition-all disabled:pointer-events-none disabled:opacity-50 [&_svg]:pointer-events-none [&_svg:not([class*='size-'])]:size-4 shrink-0 [&_svg]:shrink-0 outline-none focus-visible:border-ring focus-visible:ring-ring/50 focus-visible:ring-[3px] aria-invalid:ring-destructive/20 dark:aria-invalid:ring-destructive/40 aria-invalid:border-destructive\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-primary text-primary-foreground hover:bg-primary/90\",\n        destructive:\n          \"bg-destructive text-white hover:bg-destructive/90 focus-visible:ring-destructive/20 dark:focus-visible:ring-destructive/40 dark:bg-destructive/60\",\n        outline:\n          \"border bg-background shadow-xs hover:bg-accent hover:text-accent-foreground dark:bg-input/30 dark:border-input dark:hover:bg-input/50\",\n        secondary:\n          \"bg-secondary text-secondary-foreground hover:bg-secondary/80\",\n        ghost:\n          \"hover:bg-accent hover:text-accent-foreground dark:hover:bg-accent/50\",\n        link: \"text-primary underline-offset-4 hover:underline\",\n      },\n      size: {\n        default: \"h-9 px-4 py-2 has-[>svg]:px-3\",\n        sm: \"h-8 rounded-md gap-1.5 px-3 has-[>svg]:px-2.5\",\n        lg: \"h-10 rounded-md px-6 has-[>svg]:px-4\",\n        icon: \"size-9\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nfunction Button({\n  className,\n  variant,\n  size,\n  asChild = false,\n  ...props\n}: React.ComponentProps<\"button\"> &\n  VariantProps<typeof buttonVariants> & {\n    asChild?: boolean\n  }) {\n  const Comp = asChild ? Slot : \"button\"\n\n  return (\n    <Comp\n      data-slot=\"button\"\n      className={cn(buttonVariants({ variant, size, className }))}\n      {...props}\n    />\n  )\n}\n\nexport { Button, buttonVariants }\n",
      "type": "registry:component"
    },
    {
      "path": "components/ui/select.tsx",
      "content": "\"use client\"\n\nimport * as React from \"react\"\nimport * as SelectPrimitive from \"@radix-ui/react-select\"\nimport { CheckIcon, ChevronDownIcon, ChevronUpIcon } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nfunction Select({\n  ...props\n}: React.ComponentProps<typeof SelectPrimitive.Root>) {\n  return <SelectPrimitive.Root data-slot=\"select\" {...props} />\n}\n\nfunction SelectGroup({\n  ...props\n}: React.ComponentProps<typeof SelectPrimitive.Group>) {\n  return <SelectPrimitive.Group data-slot=\"select-group\" {...props} />\n}\n\nfunction SelectValue({\n  ...props\n}: React.ComponentProps<typeof SelectPrimitive.Value>) {\n  return <SelectPrimitive.Value data-slot=\"select-value\" {...props} />\n}\n\nfunction SelectTrigger({\n  className,\n  size = \"default\",\n  children,\n  ...props\n}: React.ComponentProps<typeof SelectPrimitive.Trigger> & {\n  size?: \"sm\" | \"default\"\n}) {\n  return (\n    <SelectPrimitive.Trigger\n      data-slot=\"select-trigger\"\n      data-size={size}\n      className={cn(\n        \"border-input data-[placeholder]:text-muted-foreground [&_svg:not([class*='text-'])]:text-muted-foreground focus-visible:border-ring focus-visible:ring-ring/50 aria-invalid:ring-destructive/20 dark:aria-invalid:ring-destructive/40 aria-invalid:border-destructive dark:bg-input/30 dark:hover:bg-input/50 flex w-fit items-center justify-between gap-2 rounded-md border bg-transparent px-3 py-2 text-sm whitespace-nowrap shadow-xs transition-[color,box-shadow] outline-none focus-visible:ring-[3px] disabled:cursor-not-allowed disabled:opacity-50 data-[size=default]:h-9 data-[size=sm]:h-8 *:data-[slot=select-value]:line-clamp-1 *:data-[slot=select-value]:flex *:data-[slot=select-value]:items-center *:data-[slot=select-value]:gap-2 [&_svg]:pointer-events-none [&_svg]:shrink-0 [&_svg:not([class*='size-'])]:size-4\",\n        className\n      )}\n      {...props}\n    >\n      {children}\n      <SelectPrimitive.Icon asChild>\n        <ChevronDownIcon className=\"size-4 opacity-50\" />\n      </SelectPrimitive.Icon>\n    </SelectPrimitive.Trigger>\n  )\n}\n\nfunction SelectContent({\n  className,\n  children,\n  position = \"popper\",\n  ...props\n}: React.ComponentProps<typeof SelectPrimitive.Content>) {\n  return (\n    <SelectPrimitive.Portal>\n      <SelectPrimitive.Content\n        data-slot=\"select-content\"\n        className={cn(\n          \"bg-popover text-popover-foreground data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 relative z-50 max-h-(--radix-select-content-available-height) min-w-[8rem] origin-(--radix-select-content-transform-origin) overflow-x-hidden overflow-y-auto rounded-md border shadow-md\",\n          position === \"popper\" &&\n            \"data-[side=bottom]:translate-y-1 data-[side=left]:-translate-x-1 data-[side=right]:translate-x-1 data-[side=top]:-translate-y-1\",\n          className\n        )}\n        position={position}\n        {...props}\n      >\n        <SelectScrollUpButton />\n        <SelectPrimitive.Viewport\n          className={cn(\n            \"p-1\",\n            position === \"popper\" &&\n              \"h-[var(--radix-select-trigger-height)] w-full min-w-[var(--radix-select-trigger-width)] scroll-my-1\"\n          )}\n        >\n          {children}\n        </SelectPrimitive.Viewport>\n        <SelectScrollDownButton />\n      </SelectPrimitive.Content>\n    </SelectPrimitive.Portal>\n  )\n}\n\nfunction SelectLabel({\n  className,\n  ...props\n}: React.ComponentProps<typeof SelectPrimitive.Label>) {\n  return (\n    <SelectPrimitive.Label\n      data-slot=\"select-label\"\n      className={cn(\"text-muted-foreground px-2 py-1.5 text-xs\", className)}\n      {...props}\n    />\n  )\n}\n\nfunction SelectItem({\n  className,\n  children,\n  ...props\n}: React.ComponentProps<typeof SelectPrimitive.Item>) {\n  return (\n    <SelectPrimitive.Item\n      data-slot=\"select-item\"\n      className={cn(\n        \"focus:bg-accent focus:text-accent-foreground [&_svg:not([class*='text-'])]:text-muted-foreground relative flex w-full cursor-default items-center gap-2 rounded-sm py-1.5 pr-8 pl-2 text-sm outline-hidden select-none data-[disabled]:pointer-events-none data-[disabled]:opacity-50 [&_svg]:pointer-events-none [&_svg]:shrink-0 [&_svg:not([class*='size-'])]:size-4 *:[span]:last:flex *:[span]:last:items-center *:[span]:last:gap-2\",\n        className\n      )}\n      {...props}\n    >\n      <span className=\"absolute right-2 flex size-3.5 items-center justify-center\">\n        <SelectPrimitive.ItemIndicator>\n          <CheckIcon className=\"size-4\" />\n        </SelectPrimitive.ItemIndicator>\n      </span>\n      <SelectPrimitive.ItemText>{children}</SelectPrimitive.ItemText>\n    </SelectPrimitive.Item>\n  )\n}\n\nfunction SelectSeparator({\n  className,\n  ...props\n}: React.ComponentProps<typeof SelectPrimitive.Separator>) {\n  return (\n    <SelectPrimitive.Separator\n      data-slot=\"select-separator\"\n      className={cn(\"bg-border pointer-events-none -mx-1 my-1 h-px\", className)}\n      {...props}\n    />\n  )\n}\n\nfunction SelectScrollUpButton({\n  className,\n  ...props\n}: React.ComponentProps<typeof SelectPrimitive.ScrollUpButton>) {\n  return (\n    <SelectPrimitive.ScrollUpButton\n      data-slot=\"select-scroll-up-button\"\n      className={cn(\n        \"flex cursor-default items-center justify-center py-1\",\n        className\n      )}\n      {...props}\n    >\n      <ChevronUpIcon className=\"size-4\" />\n    </SelectPrimitive.ScrollUpButton>\n  )\n}\n\nfunction SelectScrollDownButton({\n  className,\n  ...props\n}: React.ComponentProps<typeof SelectPrimitive.ScrollDownButton>) {\n  return (\n    <SelectPrimitive.ScrollDownButton\n      data-slot=\"select-scroll-down-button\"\n      className={cn(\n        \"flex cursor-default items-center justify-center py-1\",\n        className\n      )}\n      {...props}\n    >\n      <ChevronDownIcon className=\"size-4\" />\n    </SelectPrimitive.ScrollDownButton>\n  )\n}\n\nexport {\n  Select,\n  SelectContent,\n  SelectGroup,\n  SelectItem,\n  SelectLabel,\n  SelectScrollDownButton,\n  SelectScrollUpButton,\n  SelectSeparator,\n  SelectTrigger,\n  SelectValue,\n}\n",
      "type": "registry:component"
    }
  ]
}