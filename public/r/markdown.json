{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "markdown",
  "type": "registry:component",
  "title": "Markdown",
  "description": "A markdown and MDX renderer component with customizable styling",
  "dependencies": [
    "next-mdx-remote"
  ],
  "files": [
    {
      "path": "registry/yunfei/blocks/markdown.tsx",
      "content": "\r\nimport React from 'react'\r\nimport { MDXRemote } from 'next-mdx-remote/rsc'\r\nimport { cn } from '@/lib/utils'\r\n\r\ninterface MarkdownProps {\r\n  content: string\r\n  className?: string\r\n  type?: 'markdown' | 'mdx'\r\n  components?: Record<string, React.ComponentType<any>>\r\n}\r\n\r\n// Default components for MDX\r\nconst defaultComponents = {\r\n  h1: ({ children, ...props }: any) => (\r\n    <h1 className=\"text-4xl font-bold mb-4 text-gray-900\" {...props}>\r\n      {children}\r\n    </h1>\r\n  ),\r\n  h2: ({ children, ...props }: any) => (\r\n    <h2 className=\"text-3xl font-semibold mb-3 text-gray-900\" {...props}>\r\n      {children}\r\n    </h2>\r\n  ),\r\n  h3: ({ children, ...props }: any) => (\r\n    <h3 className=\"text-2xl font-semibold mb-2 text-gray-900\" {...props}>\r\n      {children}\r\n    </h3>\r\n  ),\r\n  h4: ({ children, ...props }: any) => (\r\n    <h4 className=\"text-xl font-semibold mb-2 text-gray-900\" {...props}>\r\n      {children}\r\n    </h4>\r\n  ),\r\n  h5: ({ children, ...props }: any) => (\r\n    <h5 className=\"text-lg font-semibold mb-1 text-gray-900\" {...props}>\r\n      {children}\r\n    </h5>\r\n  ),\r\n  h6: ({ children, ...props }: any) => (\r\n    <h6 className=\"text-base font-semibold mb-1 text-gray-900\" {...props}>\r\n      {children}\r\n    </h6>\r\n  ),\r\n  p: ({ children, ...props }: any) => (\r\n    <p className=\"mb-4 text-gray-700 leading-relaxed\" {...props}>\r\n      {children}\r\n    </p>\r\n  ),\r\n  ul: ({ children, ...props }: any) => (\r\n    <ul className=\"list-disc list-inside mb-4 space-y-1 text-gray-700\" {...props}>\r\n      {children}\r\n    </ul>\r\n  ),\r\n  ol: ({ children, ...props }: any) => (\r\n    <ol className=\"list-decimal list-inside mb-4 space-y-1 text-gray-700\" {...props}>\r\n      {children}\r\n    </ol>\r\n  ),\r\n  li: ({ children, ...props }: any) => (\r\n    <li className=\"text-gray-700\" {...props}>\r\n      {children}\r\n    </li>\r\n  ),\r\n  blockquote: ({ children, ...props }: any) => (\r\n    <blockquote\r\n      className=\"border-l-4 border-gray-300 pl-4 my-4 italic text-gray-600 bg-gray-50 py-2\"\r\n      {...props}\r\n    >\r\n      {children}\r\n    </blockquote>\r\n  ),\r\n  code: ({ children, ...props }: any) => (\r\n    <code\r\n      className=\"bg-gray-100 px-1.5 py-0.5 rounded text-sm font-mono text-red-600\"\r\n      {...props}\r\n    >\r\n      {children}\r\n    </code>\r\n  ),\r\n  pre: ({ children, ...props }: any) => (\r\n    <pre\r\n      className=\"bg-gray-900 text-gray-100 p-4 rounded-lg overflow-x-auto mb-4 text-sm\"\r\n      {...props}\r\n    >\r\n      {children}\r\n    </pre>\r\n  ),\r\n  a: ({ children, href, ...props }: any) => (\r\n    <a\r\n      href={href}\r\n      className=\"text-blue-600 hover:text-blue-800 underline\"\r\n      target=\"_blank\"\r\n      rel=\"noopener noreferrer\"\r\n      {...props}\r\n    >\r\n      {children}\r\n    </a>\r\n  ),\r\n  img: ({ src, alt, ...props }: any) => (\r\n    <img\r\n      src={src}\r\n      alt={alt}\r\n      className=\"max-w-full h-auto rounded-lg shadow-sm my-4\"\r\n      {...props}\r\n    />\r\n  ),\r\n  table: ({ children, ...props }: any) => (\r\n    <div className=\"overflow-x-auto mb-4\">\r\n      <table className=\"min-w-full border-collapse border border-gray-300\" {...props}>\r\n        {children}\r\n      </table>\r\n    </div>\r\n  ),\r\n  th: ({ children, ...props }: any) => (\r\n    <th className=\"border border-gray-300 bg-gray-50 px-4 py-2 text-left font-semibold\" {...props}>\r\n      {children}\r\n    </th>\r\n  ),\r\n  td: ({ children, ...props }: any) => (\r\n    <td className=\"border border-gray-300 px-4 py-2\" {...props}>\r\n      {children}\r\n    </td>\r\n  ),\r\n  hr: (props: any) => (\r\n    <hr className=\"my-8 border-t border-gray-300\" {...props} />\r\n  ),\r\n}\r\n\r\nexport const Markdown = ({\r\n  content,\r\n  className,\r\n  type = 'mdx',\r\n  components = {}\r\n}: MarkdownProps) => {\r\n  const mergedComponents = { ...defaultComponents, ...components }\r\n\r\n  if (type === 'mdx') {\r\n    return (\r\n      <div className={cn('prose prose-gray max-w-none', className)}>\r\n        <MDXRemote source={content} components={mergedComponents} />\r\n      </div>\r\n    )\r\n  }\r\n\r\n  // For plain markdown, we'll still use MDXRemote as it can handle markdown\r\n  return (\r\n    <div className={cn('prose prose-gray max-w-none', className)}>\r\n      <MDXRemote source={content} components={mergedComponents} />\r\n    </div>\r\n  )\r\n}",
      "type": "registry:component"
    }
  ]
}